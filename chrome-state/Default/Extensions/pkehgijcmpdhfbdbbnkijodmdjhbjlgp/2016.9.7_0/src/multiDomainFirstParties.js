/**
 * Some thoughts about how to handle multi domain first parites.
 * Given a data strucutre like the one below we could implement the following 
 * pseudo code.
 * function isMultiDomainFirstParty(domain1, domain2):
 *   for list in multiDomainFirstPartiesArray:  // the below data structure
 *     if list.contains(domain1) and list.contains(domain2):
 *       return true
 *   return false
 *
 *   This list should be manually curated but could be generated by crawlilng
 *   whois data, DNT data, certificate info, etc. 
 **/ 
require.scopes.multiDomainFP = (function() {

/**
 * 2d array of related domains, all domains owned by the same entity go into 
 * an array, this is later transformed for efficient lookups. 
 */
var _multiDomainFirstPartiesArray = [
  ["google.com", "youtube.com", "blogger.com", "gstatic.com", "googleapis.com",
    "googleusercontent.com", "ggpht.com", "ytimg.com", "googlevideo.com", 
    "youtube-nocookie.com", "google.co.in", "google.co.jp", "google.de", 
    "google.co.uk", "google.fr", "google.com.br", "google.ru", "google.it"],
  ["facebook.com", "fbcdn.com", "facebook.net"],
  ["newyorktimes.com", "nyt.com"],
  ["yahooapis.com", "yimg.com", "yahoo.com", "yahoo.co.jp"],
  ["reddit.com", "redditmedia.com", "redditstatic.com"],
  ["github.com", "githubapp.com", "githubusercontent.com"],
  ["dropbox.com", "dropboxstatic.com"],
  ["abcnews.com", "go.com"],
  ["gizmodo.com", "kinja-img.com", "kinja-static.com", "deadspin.com"],
  ["wikia.com", "wikia.net", "nocookie.net"],
  ["tripadvisor.com", "tacdn.com", "tamgrt.com"],
  ["baidu.com", "bdimg.com", "bdstatic.com"],
  ["wikipedia.org", "wikimedia.org", "wikimediafoundation.org", "wiktionary.org", 
    "wikiquote.org", "wikibooks.org", "wikisource.org", "wikinews.org", 
    "wikiversity.org", "mediawiki.org", "wikidata.org", "wikivoyage.org"],
  ["twitter.com", "twimg.com", "t.co"],
  [ "amazon.com", "amazon.ca", "amazon.co.jp", "amazon.co.uk", "amazon.de", 
    "amazon.es", "amazon.fr", "amazon.it"],
  ["pornhub.com", "phncdn.com"],
  ["msn.com", "bing.com", "live.com", "bing.net"],
  ["yandex.ru", "yastatic.net", "yandex.net"],
  ["taobao.com", "alicdn.net", "tmail.com", "tbcdn.cn", "alibaba.com", 
    "aliexpress.com"],
  ["ebay.com", "ebayimg.com", "ebayrtm.com", "ebaystatic.com"],
  ["wordpress.com", "wp.com"], 
  ["netflix.com", "nflxext.com", "nflximg.net"],
  ["dummy"]
];

/**
 * Make a data structure for quick lookups of whether two domains are the same first party
 */
function _makeDomainLookup() {
  var arr = _multiDomainFirstPartiesArray;
  var out = {};
  var arrLength = arr.length;
  for (var i = 0; i < arrLength; i++) {
    var inLength = arr[i].length;
    for (var j = 0; j < inLength; j++) {
      out[arr[i][j]] = arr[i];
    }
  }
  return out;
}

var DomainLookup = _makeDomainLookup();

/**
 * Check if two domains belong to the same effective first party
 * @param {String} domain1 a base doamin
 * @param {String} domain2 a second base doamin
 *
 * @return boolean true if the domains are the same first party
 **/
function isMultiDomainFirstParty(domain1, domain2) {
  if (domain1 in DomainLookup) {
    return (DomainLookup[domain1].indexOf(domain2) >= 0);
  }
  return false;
}

/************************************** exports */
var exports = {};

exports.isMultiDomainFirstParty = isMultiDomainFirstParty;

return exports;
/************************************** exports */
})(); //require scopes
